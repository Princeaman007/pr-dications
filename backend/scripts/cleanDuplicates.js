// cleanDuplicates.js
const mongoose = require("mongoose");
const path = require("path");

// Utiliser la m√™me approche que dans votre script fetchLastGamesForAllTeams.js
require("dotenv").config({ path: path.resolve(__dirname, '..', '.env') });

// Afficher des informations de d√©bogage
console.log("V√©rification des variables d'environnement :");
console.log("MONGO_URI:", process.env.MONGO_URI ? "[d√©fini]" : "[non d√©fini]");
console.log("R√©pertoire du script:", __dirname);
console.log("Chemin vers .env recherch√©:", path.resolve(__dirname, '..', '.env'));

// V√©rifier l'URI MongoDB
const mongoURI = process.env.MONGO_URI;
if (!mongoURI) {
  console.error("‚ùå La variable MONGO_URI n'est pas d√©finie dans le fichier .env");
  process.exit(1);
}

// Correction du chemin pour acc√©der au mod√®le Match
const Match = require('../models/Match');

// Connexion MongoDB avec la variable v√©rifi√©e
mongoose.connect(mongoURI)
  .then(() => console.log("‚úÖ Connect√© √† MongoDB"))
  .catch(err => {
    console.error("‚ùå MongoDB error:", err.message);
    process.exit(1);
  });

const cleanDuplicates = async () => {
  try {
    console.log('üîç Recherche des doublons...');
    
    // √âtape 1: R√©cup√©rer tous les matches
    const allMatches = await Match.find().sort({ date: 1 });
    console.log(`üìä Nombre total de matches: ${allMatches.length}`);
    
    // √âtape 2: Identifier les doublons par gameId
    const matchesById = new Map();
    const duplicateIds = [];
    const noGameIdMatches = [];
    
    allMatches.forEach(match => {
      // Si le match n'a pas de gameId, on le signale
      if (!match.gameId) {
        noGameIdMatches.push(match._id);
        return;
      }
      
      // Si on a d√©j√† vu ce gameId, c'est un doublon
      if (matchesById.has(match.gameId)) {
        duplicateIds.push(match._id);
      } else {
        matchesById.set(match.gameId, match._id);
      }
    });
    
    console.log(`‚ö†Ô∏è ${duplicateIds.length} doublons trouv√©s`);
    console.log(`‚ö†Ô∏è ${noGameIdMatches.length} matches sans gameId trouv√©s`);
    
    // √âtape 3: Supprimer les doublons si n√©cessaire
    if (duplicateIds.length > 0) {
      console.log('üóëÔ∏è Suppression des doublons...');
      const result = await Match.deleteMany({ _id: { $in: duplicateIds } });
      console.log(`‚úÖ ${result.deletedCount} doublons supprim√©s`);
    }
    
    // √âtape 4 (optionnelle): G√©rer les matches sans gameId
    if (noGameIdMatches.length > 0) {
      console.log('‚ö†Ô∏è Attention: certains matches n\'ont pas de gameId');
      console.log('   Vous devriez v√©rifier ces matches manuellement.');
      
      // Afficher quelques exemples
      const examples = await Match.find({ _id: { $in: noGameIdMatches.slice(0, 3) } });
      console.log('Exemples de matches sans gameId:');
      examples.forEach(match => {
        console.log(`   ${match.date}: ${match.awayTeam} @ ${match.homeTeam} (${match.awayScore}-${match.homeScore})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üëã Connexion ferm√©e');
  }
};

cleanDuplicates();