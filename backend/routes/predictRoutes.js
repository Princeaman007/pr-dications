// routes/predictRoutes.js
const express = require("express");
const router = express.Router();
const { predictScorersBetweenTeams, normalizeTeamName } = require("../services/predictService");

router.get("/", async (req, res) => {
  const { teamA, teamB } = req.query;

  if (!teamA || !teamB) {
    return res.status(400).json({ 
      error: "Param√®tres manquants", 
      message: "Les param√®tres teamA et teamB sont requis" 
    });
  }

  try {
    console.log(`üîÆ Demande de pr√©diction pour ${teamA} vs ${teamB}`);
    
    // Normaliser les noms d'√©quipe
    const normalizedTeamA = normalizeTeamName(teamA);
    const normalizedTeamB = normalizeTeamName(teamB);
    
    // Si l'√©quipe n'a pas √©t√© reconnue, avertir l'utilisateur
    if (normalizedTeamA === "√âquipe inconnue" || normalizedTeamB === "√âquipe inconnue") {
      console.warn(`‚ö†Ô∏è √âquipe(s) non reconnue(s): ${teamA} et/ou ${teamB}`);
    }
    
    console.log(`üìä G√©n√©ration de pr√©diction pour ${normalizedTeamA} vs ${normalizedTeamB}`);
    const prediction = await predictScorersBetweenTeams(normalizedTeamA, normalizedTeamB);
    
    // Ajouter des m√©tadonn√©es √† la r√©ponse
    const response = {
      teams: {
        teamA: normalizedTeamA,
        teamB: normalizedTeamB,
        originalTeamA: teamA,
        originalTeamB: teamB
      },
      timestamp: new Date().toISOString(),
      ...prediction
    };
    
    console.log(`‚úÖ Pr√©diction g√©n√©r√©e avec succ√®s (source: ${prediction.source})`);
    res.json(response);
  } catch (err) {
    console.error("‚ùå Erreur API pr√©diction:", err);
    res.status(500).json({ 
      error: "Erreur lors de la g√©n√©ration de la pr√©diction", 
      message: err.message 
    });
  }
});

// Nouvelle route pour v√©rifier la validit√© d'une √©quipe
router.get("/validate-team", (req, res) => {
  const { team } = req.query;
  
  if (!team) {
    return res.status(400).json({ error: "Le param√®tre 'team' est requis" });
  }
  
  const normalized = normalizeTeamName(team);
  const isValid = normalized !== "√âquipe inconnue";
  
  res.json({
    original: team,
    normalized,
    isValid
  });
});

module.exports = router;