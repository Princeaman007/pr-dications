const axios = require("axios");
const mongoose = require("mongoose");
require("dotenv").config();

const Match = require("./models/Match");

// Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ Connect√© √† MongoDB"))
  .catch(err => {
    console.error("‚ùå Erreur MongoDB :", err.message);
    process.exit(1);
  });

// üîÅ Nouvelle fonction : r√©cup√®re les scorers avec goals + assists
const getFullScorers = async (gameId) => {
  try {
    const url = `https://api-web.nhle.com/v1/gamecenter/${gameId}/boxscore`;
    const res = await axios.get(url);

    const stats = res.data.playerByGameStats;
    if (!stats) return [];

    const players = [
      ...(stats.homeTeam?.forwards || []),
      ...(stats.homeTeam?.defense || []),
      ...(stats.awayTeam?.forwards || []),
      ...(stats.awayTeam?.defense || [])
    ];

    const scorers = [];

    for (const player of players) {
      const goals = player.goals || 0;
      const assists = player.assists || 0;

      if (goals > 0 || assists > 0) {
        scorers.push({
          name: `${player.firstName.default} ${player.lastName.default}`,
          goals,
          assists
        });
      }
    }

    return scorers;
  } catch (err) {
    console.error(`‚ùå Erreur r√©cup√©ration scorers pour game ${gameId}: ${err.message}`);
    return [];
  }
};

// üîß Mise √† jour des matchs existants
const updateScorers = async () => {
  try {
    const matches = await Match.find({
      $or: [
        { scorers: { $exists: false } },
        { "scorers.0": { $exists: false } }, // vide
        { "scorers.0.goals": { $exists: false } } // ancien format (juste noms)
      ],
      gameId: { $exists: true }
    });

    if (matches.length === 0) {
      console.log("‚úÖ Aucun match √† mettre √† jour, tout est d√©j√† propre !");
      return;
    }

    console.log(`üîç ${matches.length} match(s) √† enrichir avec les buteurs complets...\n`);

    for (const match of matches) {
      try {
        const scorers = await getFullScorers(match.gameId);

        if (scorers.length > 0) {
          await Match.updateOne(
            { _id: match._id },
            { $set: { scorers } }
          );
          console.log(`‚úÖ ${match.homeTeam} vs ${match.awayTeam} mis √† jour avec ${scorers.length} buteurs.`);
        } else {
          console.log(`‚ö†Ô∏è Aucun scorer trouv√© pour ${match.homeTeam} vs ${match.awayTeam}`);
        }
      } catch (err) {
        console.error(`üí• Erreur update match ID ${match._id}: ${err.message}`);
      }
    }
  } catch (err) {
    console.error("‚ùå Erreur principale :", err.message);
  } finally {
    mongoose.connection.close();
  }
};

updateScorers();
